@using System.Diagnostics.Eventing.Reader
@using Microsoft.AspNet.Identity
@using pickuphockey.Models
@model IEnumerable<pickuphockey.Models.BuySell>
@{
    var isAdmin = User.IsInRole("Admin");
    var pstZone = TimeZoneInfo.FindSystemTimeZoneById(System.Configuration.ConfigurationManager.AppSettings["DisplayTimeZone"]);
}
<h2>Buys / Sells</h2>

<table class="table">
    <tr>
        <th>
            Action
        </th>
        <th>
            @Html.DisplayNameFor(model => model.SellerNote)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.BuyerNote)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.TeamAssignment)
        </th>
        <th>
            Payment
        </th>
        <th>
            Action
        </th>
    </tr>

@foreach (var item in Model)
{
    var buyerName = "TBD";
    var sellerName = "TBD";
    var sellingVerb = "SELLING TO";

    if (!string.IsNullOrEmpty(item.SellerUserId))
    {
        sellerName = item.SellerUser.FirstName + " " + item.SellerUser.LastName;
    }
    
    if (!string.IsNullOrEmpty(item.BuyerUserId))
    {
        buyerName = item.BuyerUser.FirstName + " " + item.BuyerUser.LastName;
    }

    if (!string.IsNullOrEmpty(item.SellerUserId) && !string.IsNullOrEmpty(item.BuyerUserId))
    {
        sellingVerb = "SOLD TO";
    }
    <tr>
        <td>
            @sellerName @sellingVerb @buyerName
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.SellerNote)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.BuyerNote)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.TeamAssignment)
        </td>
        <td>
            @if (item.PaymentPreference == PaymentPreference.PayPal && !string.IsNullOrEmpty(item.SellerUserId) && !string.IsNullOrEmpty(item.BuyerUserId) && item.BuyerUserId == User.Identity.GetUserId())
            {
                <div>
                    <form action="https://www.sandbox.paypal.com/cgi-bin/webscr" method="post" target="_top">
                        <input type="hidden" name="cmd" value="_xclick">
                        <input type="hidden" name="business" value="@item.SellerUser.PayPalEmail">
                        <input type="hidden" name="lc" value="US">
                        <input type="hidden" name="item_name" value="@System.Configuration.ConfigurationManager.AppSettings["SiteTitle"] - @item.Session.SessionDate.ToString("dddd, MM/dd/yyyy")">
                        <input type="hidden" name="amount" value="23.00">
                        <input type="hidden" name="currency_code" value="USD">
                        <input type="hidden" name="button_subtype" value="services">
                        <input type="hidden" name="no_note" value="0">
                        <input type="hidden" name="tax_rate" value="0.000">
                        <input type="hidden" name="shipping" value="0.00">
                        <input type="hidden" name="bn" value="PP-BuyNowBF:btn_paynow_SM.gif:NonHostedGuest">
                        <input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_paynow_SM.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!">
                        <img alt="" src="https://www.paypalobjects.com/en_US/i/scr/pixel.gif" width="1" height="1">
                        <input name="notify_url" value="/BuySells/PayPalResponse" type="hidden" />
                    </form>
                </div>
            }
            @if (!string.IsNullOrEmpty(item.BuyerUserId) && !string.IsNullOrEmpty(item.SellerUserId))
            {
                var canModifySent = item.BuyerUserId == User.Identity.GetUserId();
                var canModifyReceived = item.SellerUserId == User.Identity.GetUserId();
                
                <div>
                    @(canModifySent ? Html.CheckBoxFor(modelItem => item.PaymentSent, htmlAttributes: new { id = "PaymentSent_" + item.BuySellId }) : Html.CheckBoxFor(modelItem => item.PaymentSent, htmlAttributes: new {disabled = "disabled"}))
                    <span>Sent</span>
                    <br />
                    @(canModifyReceived ? Html.CheckBoxFor(modelItem => item.PaymentReceived, htmlAttributes: new { id = "PaymentReceived_" + item.BuySellId }) : Html.CheckBoxFor(modelItem => item.PaymentReceived, htmlAttributes: new { disabled = "disabled" }))
                    <span>Received</span>
                </div>
            }
        </td>
        <td>
            @{
                var pastSession = item.Session.SessionDate < TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, pstZone).Date;
                if (!pastSession)
                {
                    if (!string.IsNullOrEmpty(item.SellerUserId) && string.IsNullOrEmpty(item.BuyerUserId) && (item.SellerUserId == User.Identity.GetUserId() || isAdmin))
                    {
                        @Html.ActionLink("Remove Seller Spot", "RemoveSeller", "BuySells", new {id = item.BuySellId}, null)
                    }
                    else if (string.IsNullOrEmpty(item.SellerUserId) && !string.IsNullOrEmpty(item.BuyerUserId) && (item.BuyerUserId == User.Identity.GetUserId() || isAdmin))
                    {
                        @Html.ActionLink("Remove Buyer Spot", "RemoveBuyer", "BuySells", new {id = item.BuySellId}, null)
                    }
                }
            }
        </td>
    </tr>
}

</table>
